from telegram import Update  
from telegram.ext import Updater, CommandHandler, CallbackContext  
import sqlite3  
from datetime import timedelta  

# –ö–æ–º–∞–Ω–¥–∞ /start  
def start(update: Update, context: CallbackContext):  
    update.message.reply_text(  
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —à–∫–æ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"  
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"  
        "/add_schedule - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"  
        "/view_schedule - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"  
        "/add_homework - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n"  
        "/view_homework - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"  
        "/set_reminder - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"  
    )  

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è  
def add_schedule(update: Update, context: CallbackContext):  
    try:  
        day, subject, time = context.args  
        user_id = update.message.from_user.id  

        conn = sqlite3.connect('school_bot.db')  
        cursor = conn.cursor()  
        cursor.execute('INSERT INTO schedule (user_id, day, subject, time) VALUES (?, ?, ?, ?)',   
                       (user_id, day, subject, time))  
        conn.commit()  
        conn.close()  

        update.message.reply_text(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {day}, {subject}, {time}")  
    except Exception as e:  
        update.message.reply_text("–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_schedule –¥–µ–Ω—å –ø—Ä–µ–¥–º–µ—Ç –≤—Ä–µ–º—è")  

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è  
def view_schedule(update: Update, context: CallbackContext):  
    user_id = update.message.from_user.id  

    conn = sqlite3.connect('school_bot.db')  
    cursor = conn.cursor()  
    cursor.execute('SELECT day, subject, time FROM schedule WHERE user_id = ?', (user_id,))  
    schedule = cursor.fetchall()  
    conn.close()  

    if schedule:  
        response = "üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"  
        for entry in schedule:  
            response += f"{entry[0]}: {entry[1]} –≤ {entry[2]}\n"  
        update.message.reply_text(response)  
    else:  
        update.message.reply_text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")  

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è  
def add_homework(update: Update, context: CallbackContext):  
    try:  
        subject, task, deadline = " ".join(context.args).rsplit(maxsplit=2)  
        user_id = update.message.from_user.id  

        conn = sqlite3.connect('school_bot.db')  
        cursor = conn.cursor()  
        cursor.execute('INSERT INTO homework (user_id, subject, task, deadline) VALUES (?, ?, ?, ?)',   
                       (user_id, subject, task, deadline))  
        conn.commit()  
        conn.close()  

        update.message.reply_text(f"üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {subject}, {task}, —Å—Ä–æ–∫: {deadline}")  
    except Exception as e:  
        update.message.reply_text("–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_homework –ø—Ä–µ–¥–º–µ—Ç –∑–∞–¥–∞–Ω–∏–µ —Å—Ä–æ–∫")  

# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π  
def view_homework(update: Update, context: CallbackContext):  
    user_id = update.message.from_user.id  

    conn = sqlite3.connect('school_bot.db')  
    cursor = conn.cursor()  
    cursor.execute('SELECT subject, task, deadline FROM homework WHERE user_id = ?', (user_id,))  
    homework = cursor.fetchall()  
    conn.close()  

    if homework:  
        response = "üìö –í–∞—à–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n"  
        for entry in homework:  
            response += f"{entry[0]}: {entry[1]} (—Å—Ä–æ–∫: {entry[2]})\n"  
        update.message.reply_text(response)  
    else:  
        update.message.reply_text("–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")  

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è  
def set_reminder(update: Update, context: CallbackContext):  
    try:  
        reminder_time = int(context.args[0])  # –í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
        user_id = update.message.from_user.id  

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        context.job_queue.run_once(remind_user, timedelta(minutes=reminder_time), context=user_id)
        update.message.reply_text(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time} –º–∏–Ω—É—Ç(—ã).")  
    except (IndexError, ValueError):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        update.message.reply_text("–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /set_reminder –≤—Ä–µ–º—è_–≤_–º–∏–Ω—É—Ç–∞—Ö")  

# –§—É–Ω–∫—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è  
def remind_user(context: CallbackContext):  
    job = context.job
    context.bot.send_message(job.context, text="‚è∞ –í—Ä–µ–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")  

def main(): 
    telegram_token = "7768482954:AAH8BfXTQ1SuGUdtdRTw0BuUMNx5vLPdyCI" 
    updater = Updater(telegram_token, use_context=True) 
    dp = updater.dispatcher 

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ 
    dp.add_handler(CommandHandler("start", start)) 
    dp.add_handler(CommandHandler("add_schedule", add_schedule)) 
    dp.add_handler(CommandHandler("view_schedule", view_schedule)) 
    dp.add_handler(CommandHandler("add_homework", add_homework)) 
    dp.add_handler(CommandHandler("view_homework", view_homework)) 
    dp.add_handler(CommandHandler("set_reminder", set_reminder)) 

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ 
    updater.start_polling() 
    updater.idle() 

if __name__ == '__main__': 
    main()
